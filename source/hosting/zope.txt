======================
 Zope
======================

.. admonition :: Description

	Hosting and administrative tasks for Zope application server / Plone server.

.. contents :: :local:

.. highlight:: console

Introduction
--------------

This page contains instructions how to configure Zope application server.

Zope control command
----------------------

The command for Zope tasks is ``bin/instance`` in buildout based Plones.

List available command::

    bin/instance help

For older Plone releases, the command is ``zopectl``.

Adding users from command-line (reset admin password)
-------------------------------------------------------

You need to do this when you forget admin password or the database is damaged.

Add user with Zope Manager permissions::

    bin/instance stop # stop the site first
    bin/instance adduser <user_name> <user_password>
    bin/instance start
    
You need to stop the site first.

You also cannot override existing ``admin`` user, so you probably want to add ``admin2``.

Timezone
----------

Add to [instance] in buildout.cfg::

        zope-conf-additional=
            
            <environment>
                TZ Europe/Helsinki
            </environment>
            
Creating additional debug instances
------------------------------------

You might want to keep your production buildout.cfg and development configuration
in sync automatically as possible. 

A good idea is to use same buildout.cfg on every environment.
If conditional things, like setting debug mode on, are needed, you can extend the buildout 
sections, which in turn create "additional Zopes" under bin/ folder::

        [instance]
        recipe = plone.recipe.zope2instance
        zope2-location = ${zope2:location}
        user = admin:x
        http-address = 8080
        debug-mode = off
        verbose-security = off
        
        ...
           
        environment=
            PTS_LANGUAGES=en fi
        
        #
        # Create a launcher script which will start one Zope instance in debug mode
        #
        [debug-instance]
        # Extend the main production instance  
        <= instance
        
        # Here override specific settings to make the instance run in debug mode
        debug-mode = on
        verbose-security = on
        event-log-level = DEBUG
                
And now you can start your **development** Zope as::
        
        bin/debug-instance fg
        
And your main Zope instance stays in production mode::

        bin/instance 
        
.. note ::

        Using fg switch foces Zope always into debug mode, but does not concern log level.                         
               
Virtual hosting
---------------

Zope has a component called `VirtualHostMonster <https://plone.dcri.duke.edu/info/faq/vhm>`_ which does the virtual host mapping inside
the Zope. 

Supressing virtual host monster
===============================

In the case you have set virtual hosting rules so that Zope does no longer allow you to access the management interface,
you can add _SUPPRESS_ACCESSRULE" to the URL to disable VirtualHostMonster.

Import and export
------------------

Zope application server offers copying parts of the tree structure via import/export feature.
Exported file is basically a Python pickle containing the chosen node and all child nodes.

Importable .zexp files must be placed on ``/parts/instance/import``  buildout folder on the server. 
If you are using  clustered ZEO set-up, always run imports through a specific front-end instance
by using direct port access. Note that ``parts`` folder structure is pruned on each
buildout run.

When files are placed on the server to correct folder, Import/Export tab in ZMI will pick them
up in the selection drop down. You do not need to restart Zope.

More information

* http://quintagroup.com/services/support/tutorials/import-export-plone/ 

Copying a remote site database
--------------------------------

Below is a UNIX shell script to copy a remote Plone site(s) database to
your local computer. This is useful for synchronizing the 
development copy of a site from a live server.

copy-plone-site.sh

.. code-block:: console
	
	#!/bin/sh
	#
	# Copies a Plone site data from a remote computer to a local computer
	#
	# Copies
	#
	# - Data.fs
	#
	# - blobstorage
	#
	# Standard var/ folder structure is assumed in the destination
	# and the source
	#
	
	if [ $# -ne 2 ] ; then
	cat <<EOF
	$0
	Copy a remote Plone site database to local computer over SSH
	Error in $0 - Invalid Argument Count
	Syntax: $0 [SSH-source to buildout folder] [buildout target folder]
	Example: ./copy-plone-site.sh yourserver.com:/srv/plone/mysite .
	EOF
	exit 64 # Command line usage error
	fi
	
	SOURCE=$1
	TARGET=$2
	
	STATUS=`$TARGET/bin/instance status`
	
	if [ "$STATUS" != "daemon manager not running" ] ; then
		echo "Please stop your Plone site first"
		exit 1
	fi
	
	rsync -av --progress --compress-level=9 "$SOURCE"/var/filestorage/Data.fs "$TARGET"/var/filestorage
	
	# Copy blobstorage on rsync pass
	# (We don't need compression for blobs as they most likely are compressed images already)
	rsync -av --progress "$SOURCE"/var/blobstorage "$TARGET"/var/


Pack and copy big Data.fs
----------------------------

Pack Data.fs using `pbzip2 <http://compression.ca/pbzip2/>`_, efficient multicore bzip2 compressor, before copying::


   # Attach to a screen or create new one if not exist so that,
   # the packing process is not interrupted even if you lose a terminal
   screen -x 
   
   # the command won't abort in the middle of the run if terminal lost
   cd /srv/plone/yoursite/zeocluster/var/filestorage
   tar -c --ignore-failed-read Data.fs | pbzip2 -c > /tmp/Data.fs.tar.bz2

   # Alternative version using standard bzip2
   # tar -c --ignore-failed-read -jf /tmp/Data.fs.tar.bzip2 Data.fs

Then copy to your own computer::

   scp unixuser@server.com:/tmp/Data.fs.tar.bz2 .

... or using ``rsync`` which can resume::

   rsync -av --progress user@server.com:/tmp/Data.fs.tar.bz2 .    

Log rotate
------------

Log rotation prevents log files filling up indefinitely by creating 
a new file for a certain timespan and dropping too old files.

Unix tool ``logrotate`` is used for log rotation.

You need to rotatet Zope access and error logs,
plus possible front-end web server logs. The latter
is usually taken care of your operating system.

To set-up log rotation for Plone

* Install logrotate on the system (if you don't already have one)

* You need to know effective UNIX user you run Plone processes

* Edit log rotation configuration files to include Plone log directories

* Do a test run

To add a log rotation configuration file for Plone
add a file ``/etc/logrotate.d/yoursite`` as root.

.. note ::

	This recipe applies only for single process Zope installs (instance).
	If you use ZEO clustering you need to do this little bit different.

The file contents::

	# This is the path + selector for the log files
	/srv/plone/yoursite/Plone/zinstance/var/log/instance*.log {
	        daily
	        missingok
	        # How many days to keep logs
	        # In our cases 60 days
	        rotate 60
	        compress
	        delaycompress
	        notifempty
	        # File owner and permission for rotated files
	        # For additional safety this can be a different
	        # user so your Plone UNIX user cannot 
	        # delete logs
	        create 640 root root

	        # This signal will tell Zope to open a new file-system inode for the log file
	        # so it doesn't keep reserving the old log file handle for evenif the file is deleted
			postrotate
				[ ! -f /srv/plone/yoursite/Plone/zinstance/var/instance.pid ] || kill -USR2 `cat /srv/plone/yoursite/Plone/zinstance/var/instance.pid`
			endscript
	}

Then do a test run of logrotate, as root

.. code-block:: console

	# -f = force rotate
	# -d = debug mode
	logrotate -f -d /etc/logrotate.conf

And if you want to see the results right away:

	# -f = force rotate
	logrotate -f /etc/logrotate.conf

In normal production, logrotate is installed to your operating system cron for daily runs automatically.

More info

* http://linuxers.org/howto/howto-use-logrotate-manage-log-files

* http://docs.zope.org/zope2/zope2book/MaintainingZope.html

* http://serverfault.com/questions/57993/how-to-use-wildcards-within-logrotate-configuration-files

Log rotate and chroot
=========================

chroot'ed environments don't usually get their own cron.
In this case you can trigger the log rotate from the parent system

Add in the parent ``/etc/cron.daily/yourchrootname-logrotate``

	#!/bin/sh
	schroot -c yoursitenet -u root -r logrotate /etc/logrotate.conf

Log rotate generation via buildout using UNIX log rotate command
==============================================================================

``buildout.cfg``::

	[logrotate]
	recipe = collective.recipe.template
	input =  ${buildout:directory}/templates/logrotate.conf
	output = ${buildout:directory}/etc/logrotate.conf

``templates/logrotate.conf``::

	rotate 4
	weekly
	create
	compress
	delaycompress
	missingok
	
	${buildout:directory}/var/log/instance1.log ${buildout:directory}/var/log/instance1-Z2.log {
	    sharedscripts
	    postrotate
	        /bin/kill -USR2 $(cat ${buildout:directory}/var/instance1.pid)
	    endscript
	}
	
	${buildout:directory}/var/log/instance2.log ${buildout:directory}/var/log/instance2-Z2.log {
	    sharedscripts
	    postrotate
	        /bin/kill -USR2 $(cat ${buildout:directory}/var/instance2.pid)
	    endscript
	}

More info

* http://stackoverflow.com/a/9437677/315168

Log rotate on Windows
========================

Use ``iw.rotatezlogs``

* http://stackoverflow.com/a/9434150/315168

 